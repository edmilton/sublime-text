{
    "scope": "meta.name.interpolated.hash, source.cfscript - source.sql - text.html.cfm - string - meta - comment, source.cfscript.embedded.cfml - string",
    "completions":
    [

        // misc completions
        { "trigger": "var", "contents": "var $1 = $2"},

        { "trigger": "true", "contents": "true"},
        { "trigger": "false", "contents": "false"},

        { "trigger": "TRUE", "contents": "TRUE"},
        { "trigger": "FALSE", "contents": "FALSE"},

        { "trigger": "return", "contents": "return "},
        { "trigger": "RETURN", "contents": "RETURN "},

        // scopes
        { "trigger": "application", "contents": "application"},
        { "trigger": "APPLICATION", "contents": "APPLICATION"},

        { "trigger": "arguments", "contents": "arguments"},
        { "trigger": "ARGUMENTS", "contents": "ARGUMENTS"},

        { "trigger": "attributes", "contents": "attributes"},
        { "trigger": "ATTRIBUTES", "contents": "ATTRIBUTES"},

        { "trigger": "caller", "contents": "caller"},
        { "trigger": "CALLER", "contents": "CALLER"},

        { "trigger": "CGI", "contents": "CGI"},
        { "trigger": "ThisTag", "contents": "ThisTag"},

        { "trigger": "client", "contents": "client"},
        { "trigger": "CLIENT", "contents": "CLIENT"},

        { "trigger": "cookie", "contents": "cookie"},
        { "trigger": "COOKIE", "contents": "COOKIE"},

        { "trigger": "form", "contents": "form"},
        { "trigger": "FORM", "contents": "FORM"},

        { "trigger": "request", "contents": "request"},
        { "trigger": "REQUEST", "contents": "REQUEST"},

        { "trigger": "local", "contents": "local"},
        { "trigger": "LOCAL", "contents": "LOCAL"},

        { "trigger": "server", "contents": "server"},
        { "trigger": "SERVER", "contents": "SERVER"},

        { "trigger": "session", "contents": "session"},
        { "trigger": "SESSION", "contents": "SESSION"},

        { "trigger": "thread", "contents": "thread"},
        { "trigger": "THREAD", "contents": "THREAD"},

        { "trigger": "url", "contents": "url"},
        { "trigger": "URL", "contents": "URL"},

        { "trigger": "this", "contents": "this"},
        { "trigger": "THIS", "contents": "THIS"},

        { "trigger": "variables", "contents": "variables"},
        { "trigger": "VARIABLES", "contents": "VARIABLES"},

        // functions
        { "trigger": "abs\tfn. (cfscript)", "contents": "abs(${1:${2:number}})"},
        { "trigger": "aCos\tfn. (cfscript)", "contents": "aCos(${1:${2:number}})"},
        { "trigger": "arrayAppend\tfn. (cfscript)", "contents": "arrayAppend(${1:${2:array}, ${3:value}})"},
        { "trigger": "arrayAvg\tfn. (cfscript)", "contents": "arrayAvg(${1:${2:array}})"},
        { "trigger": "arrayClear\tfn. (cfscript)", "contents": "arrayClear(${1:${2:array}})"},
        { "trigger": "arrayDeleteAt\tfn. (cfscript)", "contents": "arrayDeleteAt(${1:${2:array}, ${3:position}})"},
        { "trigger": "arrayInsertAt\tfn. (cfscript)", "contents": "arrayInsertAt(${1:${2:array}, ${3:position}, ${4:value}})"},
        { "trigger": "arrayIsEmpty\tfn. (cfscript)", "contents": "arrayIsEmpty(${1:${2:array}})"},
        { "trigger": "arrayLen\tfn. (cfscript)", "contents": "arrayLen(${1:${2:array}})"},
        { "trigger": "arrayMax\tfn. (cfscript)", "contents": "arrayMax(${1:${2:array}})"},
        { "trigger": "arrayMin\tfn. (cfscript)", "contents": "arrayMin(${1:${2:array}})"},
        { "trigger": "arrayNew\tfn. (cfscript)", "contents": "arrayNew(${1:${2:dimension}})"},
        { "trigger": "arrayPrepend\tfn. (cfscript)", "contents": "arrayPrepend(${1:${2:array}, ${3:value}})"},
        { "trigger": "arrayResize\tfn. (cfscript)", "contents": "arrayResize(${1:${2:array}, ${3:size}})"},
        { "trigger": "arraySet\tfn. (cfscript)", "contents": "arraySet(${1:${2:array}, ${3:start_pos}, ${4:end_pos}, ${5:value}})"},
        { "trigger": "arraySort\tfn. (cfscript)", "contents": "arraySort(${1:${2:array}, \"${3:sort_type}\"${4:, [sort_order]}})"},
        { "trigger": "arraySum\tfn. (cfscript)", "contents": "arraySum(${1:${2:array}})"},
        { "trigger": "arraySwap\tfn. (cfscript)", "contents": "arraySwap(${1:${2:array}, ${3:position1}, ${4:position2}})"},
        { "trigger": "arrayToList\tfn. (cfscript)", "contents": "arrayToList(${1:${2:array}${3:, [delimiter]}})"},
        { "trigger": "asc\tfn. (cfscript)", "contents": "asc(${1:\"${2:string}\"})"},
        { "trigger": "aSin\tfn. (cfscript)", "contents": "aSin(${1:${2:number}})"},
        { "trigger": "atn\tfn. (cfscript)", "contents": "atn(${1:${2:number}})"},
        { "trigger": "binaryDecode\tfn. (cfscript)", "contents": "binaryDecode(${1:\"${2:string}\", \"${3:binaryencoding}\"})"},
        { "trigger": "binaryEncode\tfn. (cfscript)", "contents": "binaryEncode(${1:${2:binarydata}, \"${3:encoding}\"})"},
        { "trigger": "bitAnd\tfn. (cfscript)", "contents": "bitAnd(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "bitMaskClear\tfn. (cfscript)", "contents": "bitMaskClear(${1:${2:number}, ${3:start}, ${4:length}})"},
        { "trigger": "bitMaskRead\tfn. (cfscript)", "contents": "bitMaskRead(${1:${2:number}, ${3:start}, ${4:length}})"},
        { "trigger": "bitMaskSet\tfn. (cfscript)", "contents": "bitMaskSet(${1:${2:number}, ${3:mask}, ${4:start}, ${5:length}})"},
        { "trigger": "bitNot\tfn. (cfscript)", "contents": "bitNot(${1:${2:number}})"},
        { "trigger": "bitOr\tfn. (cfscript)", "contents": "bitOr(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "bitSHLN\tfn. (cfscript)", "contents": "bitSHLN(${1:${2:number}, ${3:count}})"},
        { "trigger": "bitSHRN\tfn. (cfscript)", "contents": "bitSHRN(${1:${2:number}, ${3:count}})"},
        { "trigger": "bitXor\tfn. (cfscript)", "contents": "bitXor(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "ceiling\tfn. (cfscript)", "contents": "ceiling(${1:${2:number}})"},
        { "trigger": "charsetDecode\tfn. (cfscript)", "contents": "charsetDecode(${1:\"${2:string}\", \"${3:encoding}\"})"},
        { "trigger": "charsetEncode\tfn. (cfscript)", "contents": "charsetEncode(${1:${2:binaryobject}, \"${3:encoding}\"})"},
        { "trigger": "chr\tfn. (cfscript)", "contents": "chr(${1:${2:number}})"},
        { "trigger": "cJustify\tfn. (cfscript)", "contents": "cJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "compare\tfn. (cfscript)", "contents": "compare(${1:\"${2:string1}\", \"${3:string2}\"})"},
        { "trigger": "compareNoCase\tfn. (cfscript)", "contents": "compareNoCase(${1:\"${2:string1}\", \"${3:string2}\"})"},
        { "trigger": "cos\tfn. (cfscript)", "contents": "cos(${1:${2:number}})"},
        { "trigger": "createDate\tfn. (cfscript)", "contents": "createDate(${1:${2:year}, ${3:month}, ${4:day}})"},
        { "trigger": "createDateTime\tfn. (cfscript)", "contents": "createDateTime(${1:${2:year}, ${3:month}, ${4:day}, ${5:hour}, ${6:minute}, ${7:second}})"},
        { "trigger": "createObject\tfn. (cfscript)", "contents": "createObject(${1:\"${2:type}\", \"${3:context}\", \"${4:class}\", \"${5:locale}\", \"${6:servername}\", \"${7:component_name}\", \"${8:urltowsdl}\"${9:, [portname]}})"},
        { "trigger": "createODBCDate\tfn. (cfscript)", "contents": "createODBCDate(${1:${2:date}})"},
        { "trigger": "createODBCDateTime\tfn. (cfscript)", "contents": "createODBCDateTime(${1:${2:date}})"},
        { "trigger": "createODBCTime\tfn. (cfscript)", "contents": "createODBCTime(${1:${2:date}})"},
        { "trigger": "createTime\tfn. (cfscript)", "contents": "createTime(${1:${2:hour}, ${3:minute}, ${4:second}})"},
        { "trigger": "createTimeSpan\tfn. (cfscript)", "contents": "createTimeSpan(${1:${2:days}, ${3:hours}, ${4:minutes}, ${5:seconds}})"},
        { "trigger": "createUUID\tfn. (cfscript)", "contents": "createUUID(${1:})"},
        { "trigger": "dateAdd\tfn. (cfscript)", "contents": "dateAdd(${1:\"${2:datepart}\", ${3:number}, ${4:date}})"},
        { "trigger": "dateCompare\tfn. (cfscript)", "contents": "dateCompare(${1:${2:date1}, ${3:date2}${4:, [datePart]}})"},
        { "trigger": "dateConvert\tfn. (cfscript)", "contents": "dateConvert(${1:\"${2:type}\", ${3:date}})"},
        { "trigger": "dateDiff\tfn. (cfscript)", "contents": "dateDiff(${1:\"${2:datepart}\", ${3:date1}, ${4:date2}})"},
        { "trigger": "dateFormat\tfn. (cfscript)", "contents": "dateFormat(${1:${2:date}${3:, [mask]}})"},
        { "trigger": "datePart\tfn. (cfscript)", "contents": "datePart(${1:\"${2:datepart}\", ${3:date}})"},
        { "trigger": "day\tfn. (cfscript)", "contents": "day(${1:${2:date}})"},
        { "trigger": "dayOfWeek\tfn. (cfscript)", "contents": "dayOfWeek(${1:${2:date}})"},
        { "trigger": "dayOfWeekAsString\tfn. (cfscript)", "contents": "dayOfWeekAsString(${1:${2:day_of_week}})"},
        { "trigger": "dayOfYear\tfn. (cfscript)", "contents": "dayOfYear(${1:${2:date}})"},
        { "trigger": "daysInMonth\tfn. (cfscript)", "contents": "daysInMonth(${1:${2:date}})"},
        { "trigger": "daysInYear\tfn. (cfscript)", "contents": "daysInYear(${1:${2:date}})"},
        { "trigger": "de\tfn. (cfscript)", "contents": "de(${1:\"${2:string}\"})"},
        { "trigger": "decimalFormat\tfn. (cfscript)", "contents": "decimalFormat(${1:${2:number}})"},
        { "trigger": "decrementValue\tfn. (cfscript)", "contents": "decrementValue(${1:${2:number}})"},
        { "trigger": "decrypt\tfn. (cfscript)", "contents": "decrypt(${1:\"${2:encrypted_string}\", \"${3:seed}\"})"},
        { "trigger": "deleteClientVariable\tfn. (cfscript)", "contents": "deleteClientVariable(${1:\"${2:name}\"})"},
        { "trigger": "deserializeJSON\tfn. (cfscript)", "contents": "deserializeJSON(${1:string})"},
        { "trigger": "directoryList\tfn. (cfscript)", "contents": "directoryList(${1:\"${2:path}\"${3:, [recurse]}${4:, [listInfo]}${5:, [filter]}${6:, [sort]}})"},
        { "trigger": "directoryExists\tfn. (cfscript)", "contents": "directoryExists(${1:\"${2:absolute_path}\"})"},
        { "trigger": "dollarFormat\tfn. (cfscript)", "contents": "dollarFormat(${1:${2:number}})"},
        { "trigger": "duplicate\tfn. (cfscript)", "contents": "duplicate(${1:${2:variable}})"},
        { "trigger": "encrypt\tfn. (cfscript)", "contents": "encrypt(${1:\"${2:string}\", \"${3:key}\"${4:, [algorithm]}${5:, [encoding]}})"},
        { "trigger": "evaluate\tfn. (cfscript)", "contents": "evaluate(${1:\"${2:expression1}\"${3:, [expression2]}${4:, [expressionN]}})"},
        { "trigger": "exp\tfn. (cfscript)", "contents": "exp(${1:${2:number}})"},
        { "trigger": "expandPath\tfn. (cfscript)", "contents": "expandPath(${1:\"${2:relative_path}\"})"},
        { "trigger": "fileExists\tfn. (cfscript)", "contents": "fileExists(${1:\"${2:path}\"})"},
        { "trigger": "find\tfn. (cfscript)", "contents": "find(${1:\"${2:substring}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "findNoCase\tfn. (cfscript)", "contents": "findNoCase(${1:\"${2:substring}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "findOneOf\tfn. (cfscript)", "contents": "findOneOf(${1:\"${2:set}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "firstDayOfMonth\tfn. (cfscript)", "contents": "firstDayOfMonth(${1:${2:date}})"},
        { "trigger": "fix\tfn. (cfscript)", "contents": "fix(${1:${2:number}})"},
        { "trigger": "formatBaseN\tfn. (cfscript)", "contents": "formatBaseN(${1:${2:number}, ${3:radix}})"},
        { "trigger": "generateSecretKey\tfn. (cfscript)", "contents": "generateSecretKey(${1:${2:[algorithm]}})"},
        { "trigger": "getAuthUser\tfn. (cfscript)", "contents": "getAuthUser(${1:})"},
        { "trigger": "getBaseTagData\tfn. (cfscript)", "contents": "getBaseTagData(${1:\"${2:tagname}\"${3:, [instancenumber]}})"},
        { "trigger": "getBaseTagList\tfn. (cfscript)", "contents": "getBaseTagList(${1:})"},
        { "trigger": "getBaseTemplatePath\tfn. (cfscript)", "contents": "getBaseTemplatePath(${1:})"},
        { "trigger": "getClientVariablesList\tfn. (cfscript)", "contents": "getClientVariablesList(${1:})"},
        { "trigger": "getContextRoot\tfn. (cfscript)", "contents": "getContextRoot(${1:})"},
        { "trigger": "getCurrentTemplatePath\tfn. (cfscript)", "contents": "getCurrentTemplatePath(${1:})"},
        { "trigger": "getDirectoryFromPath\tfn. (cfscript)", "contents": "getDirectoryFromPath(${1:\"${2:path}\"})"},
        { "trigger": "getEncoding\tfn. (cfscript)", "contents": "getEncoding(${1:\"${2:scope_name}\"})"},
        { "trigger": "getException\tfn. (cfscript)", "contents": "getException(${1:${2:javaobject}})"},
        { "trigger": "getFileFromPath\tfn. (cfscript)", "contents": "getFileFromPath(${1:\"${2:path}\"})"},
        { "trigger": "getFunctionList\tfn. (cfscript)", "contents": "getFunctionList(${1:})"},
        { "trigger": "getGatewayHelper\tfn. (cfscript)", "contents": "getGatewayHelper(${1:\"${2:gatewayID}\"})"},
        { "trigger": "getHTTPRequestData\tfn. (cfscript)", "contents": "getHTTPRequestData(${1:})"},
        { "trigger": "getHTTPTimeString\tfn. (cfscript)", "contents": "getHTTPTimeString(${1:${2:datetime}})"},
        { "trigger": "getK2ServerDocCount\tfn. (cfscript)", "contents": "getK2ServerDocCount(${1:})"},
        { "trigger": "getK2ServerDocCountLimit\tfn. (cfscript)", "contents": "getK2ServerDocCountLimit(${1:})"},
        { "trigger": "getLocale\tfn. (cfscript)", "contents": "getLocale(${1:})"},
        { "trigger": "getLocaleDisplayName\tfn. (cfscript)", "contents": "getLocaleDisplayName(${1:})"},
        { "trigger": "getMetaData\tfn. (cfscript)", "contents": "getMetaData(${1:${2:object}})"},
        { "trigger": "getMetricData\tfn. (cfscript)", "contents": "getMetricData(${1:\"${2:mode}\"})"},
        { "trigger": "getPageContext\tfn. (cfscript)", "contents": "getPageContext(${1:})"},
        { "trigger": "getProfileSections\tfn. (cfscript)", "contents": "getProfileSections(${1:\"${2:inifile}\"})"},
        { "trigger": "getProfileString\tfn. (cfscript)", "contents": "getProfileString(${1:\"${2:inipath}\", \"${3:section}\", \"${4:entry}\"})"},
        { "trigger": "getSOAPRequest\tfn. (cfscript)", "contents": "getSOAPRequest(${1:})"},
        { "trigger": "getSOAPRequestHeader\tfn. (cfscript)", "contents": "getSOAPRequestHeader(${1:\"${2:namespace}\", \"${3:name}\"${4:, [asXML]}})"},
        { "trigger": "getSOAPResponse\tfn. (cfscript)", "contents": "getSOAPResponse(${1:\"${2:webservice}\"})"},
        { "trigger": "getSOAPResponseHeader\tfn. (cfscript)", "contents": "getSOAPResponseHeader(${1:${2:webservice}, \"${3:namespace}\", \"${4:name}\"${5:, [asXML]}})"},
        { "trigger": "getTempDirectory\tfn. (cfscript)", "contents": "getTempDirectory(${1:})"},
        { "trigger": "getTempFile\tfn. (cfscript)", "contents": "getTempFile(${1:\"${2:dir}\", \"${3:prefix}\"})"},
        { "trigger": "getTemplatePath\tfn. (cfscript)", "contents": "getTemplatePath(${1:})"},
        { "trigger": "getTickCount\tfn. (cfscript)", "contents": "getTickCount(${1:})"},
        { "trigger": "getTimeZoneInfo\tfn. (cfscript)", "contents": "getTimeZoneInfo(${1:\"${2:text}\"})"},
        { "trigger": "getToken\tfn. (cfscript)", "contents": "getToken(${1:\"${2:string}\", ${3:index}${4:, [delimiters]}})"},
        { "trigger": "hash\tfn. (cfscript)", "contents": "hash(${1:\"${2:string}\"${3:, [algorithm]}${4:, [encoding]}})"},
        { "trigger": "hour\tfn. (cfscript)", "contents": "hour(${1:${2:date}})"},
        { "trigger": "htmlCodeFormat\tfn. (cfscript)", "contents": "htmlCodeFormat(${1:\"${2:string}\"${3:, [version]}})"},
        { "trigger": "htmlEditFormat\tfn. (cfscript)", "contents": "htmlEditFormat(${1:\"${2:string}\"${3:, [version]}})"},
        { "trigger": "iif\tfn. (cfscript)", "contents": "iif(${1:${2:condition}, \"${3:expression1}\", \"${4:expression2}\"})"},
        { "trigger": "incrementValue\tfn. (cfscript)", "contents": "incrementValue(${1:${2:number}})"},
        { "trigger": "inputBaseN\tfn. (cfscript)", "contents": "inputBaseN(${1:\"${2:string}\", \"${3:radix}\"})"},
        { "trigger": "insert\tfn. (cfscript)", "contents": "insert(${1:\"${2:substring}\", \"${3:string}\", ${4:position}})"},
        { "trigger": "int\tfn. (cfscript)", "contents": "int(${1:${2:number}})"},
        { "trigger": "isArray\tfn. (cfscript)", "contents": "isArray(${1:${2:value}${3:, [number]}})"},
        { "trigger": "isBinary\tfn. (cfscript)", "contents": "isBinary(${1:${2:value}})"},
        { "trigger": "isBoolean\tfn. (cfscript)", "contents": "isBoolean(${1:${2:value}})"},
        { "trigger": "isCustomFunction\tfn. (cfscript)", "contents": "isCustomFunction(${1:${2:object}})"},
        { "trigger": "isDate\tfn. (cfscript)", "contents": "isDate(${1:${2:object}})"},
        { "trigger": "isDebugMode\tfn. (cfscript)", "contents": "isDebugMode(${1:})"},
        { "trigger": "isDefined\tfn. (cfscript)", "contents": "isDefined(${1:\"${2:variable_name}\"})"},
        { "trigger": "isK2ServerABroker\tfn. (cfscript)", "contents": "isK2ServerABroker(${1:})"},
        { "trigger": "isK2ServerDocCountExceeded\tfn. (cfscript)", "contents": "isK2ServerDocCountExceeded(${1:})"},
        { "trigger": "isK2ServerOnline\tfn. (cfscript)", "contents": "isK2ServerOnline(${1:})"},
        { "trigger": "isLeapYear\tfn. (cfscript)", "contents": "isLeapYear(${1:${2:year}})"},
        { "trigger": "isNumeric\tfn. (cfscript)", "contents": "isNumeric(${1:\"${2:string}\"})"},
        { "trigger": "isNumericDate\tfn. (cfscript)", "contents": "isNumericDate(${1:${2:number}})"},
        { "trigger": "isObject\tfn. (cfscript)", "contents": "isObject(${1:${2:value}})"},
        { "trigger": "isQuery\tfn. (cfscript)", "contents": "isQuery(${1:\"${2:value}\"})"},
        { "trigger": "isSimpleValue\tfn. (cfscript)", "contents": "isSimpleValue(${1:${2:value}})"},
        { "trigger": "isSOAPRequest\tfn. (cfscript)", "contents": "isSOAPRequest(${1:})"},
        { "trigger": "isStruct\tfn. (cfscript)", "contents": "isStruct(${1:${2:variable}})"},
        { "trigger": "isUserInRole\tfn. (cfscript)", "contents": "isUserInRole(${1:\"${2:role_name}\"})"},
        { "trigger": "isValid\tfn. (cfscript)", "contents": "isValid(${1:\"${2:type}\", ${3:value}, ${4:min}, ${5:max}, \"${6:pattern}\"})"},
        { "trigger": "isWDDX\tfn. (cfscript)", "contents": "isWDDX(${1:${2:value}})"},
        { "trigger": "isXML\tfn. (cfscript)", "contents": "isXML(${1:\"${2:value}\"})"},
        { "trigger": "isXMLAttribute\tfn. (cfscript)", "contents": "isXMLAttribute(${1:${2:value}})"},
        { "trigger": "isXMLDoc\tfn. (cfscript)", "contents": "isXMLDoc(${1:${2:value}})"},
        { "trigger": "isXMLElem\tfn. (cfscript)", "contents": "isXMLElem(${1:${2:value}})"},
        { "trigger": "isXMLNode\tfn. (cfscript)", "contents": "isXMLNode(${1:${2:value}})"},
        { "trigger": "isXMLRoot\tfn. (cfscript)", "contents": "isXMLRoot(${1:${2:value}})"},
        { "trigger": "javaCast\tfn. (cfscript)", "contents": "javaCast(${1:\"${2:type}\", \"${3:variable}\"})"},
        { "trigger": "JSStringFormat\tfn. (cfscript)", "contents": "JSStringFormat(${1:\"${2:string}\"})"},
        { "trigger": "lCase\tfn. (cfscript)", "contents": "lCase(${1:\"${2:string}\"})"},
        { "trigger": "left\tfn. (cfscript)", "contents": "left(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "len\tfn. (cfscript)", "contents": "len(${1:${2:object}})"},
        { "trigger": "listAppend\tfn. (cfscript)", "contents": "listAppend(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listChangeDelims\tfn. (cfscript)", "contents": "listChangeDelims(${1:\"${2:list}\", \"${3:new_delimiter}\"${4:, [delimiters]}})"},
        { "trigger": "listContains\tfn. (cfscript)", "contents": "listContains(${1:\"${2:list}\", \"${3:substring}\"${4:, [delimiters]}})"},
        { "trigger": "listContainsNoCase\tfn. (cfscript)", "contents": "listContainsNoCase(${1:\"${2:list}\", \"${3:substring}\"${4:, [delimiters]}})"},
        { "trigger": "listDeleteAt\tfn. (cfscript)", "contents": "listDeleteAt(${1:\"${2:list}\", ${3:position}${4:, [delimiters]}})"},
        { "trigger": "listFind\tfn. (cfscript)", "contents": "listFind(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listFindNoCase\tfn. (cfscript)", "contents": "listFindNoCase(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listFirst\tfn. (cfscript)", "contents": "listFirst(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listGetAt\tfn. (cfscript)", "contents": "listGetAt(${1:\"${2:list}\", ${3:position}${4:, [delimiters]}})"},
        { "trigger": "listInsertAt\tfn. (cfscript)", "contents": "listInsertAt(${1:\"${2:list}\", ${3:position}, \"${4:value}\"${5:, [delimiters]}})"},
        { "trigger": "listLast\tfn. (cfscript)", "contents": "listLast(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listLen\tfn. (cfscript)", "contents": "listLen(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listPrepend\tfn. (cfscript)", "contents": "listPrepend(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listQualify\tfn. (cfscript)", "contents": "listQualify(${1:\"${2:list}\", \"${3:qualifier}\"${4:, [delimiters]}${5:, [elements]}})"},
        { "trigger": "listRest\tfn. (cfscript)", "contents": "listRest(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listSetAt\tfn. (cfscript)", "contents": "listSetAt(${1:\"${2:list}\", ${3:position}, \"${4:value}\"${5:, [delimiters]}})"},
        { "trigger": "listSort\tfn. (cfscript)", "contents": "listSort(${1:\"${2:list}\", \"${3:sort_type}\"${4:, [sort_order]}${5:, [delimiters]}})"},
        { "trigger": "listToArray\tfn. (cfscript)", "contents": "listToArray(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listValueCount\tfn. (cfscript)", "contents": "listValueCount(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listValueCountNoCase\tfn. (cfscript)", "contents": "listValueCountNoCase(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "lJustify\tfn. (cfscript)", "contents": "lJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "log\tfn. (cfscript)", "contents": "log(${1:${2:number}})"},
        { "trigger": "log10\tfn. (cfscript)", "contents": "log10(${1:${2:number}})"},
        { "trigger": "LSCurrencyFormat\tfn. (cfscript)", "contents": "LSCurrencyFormat(${1:${2:number}${3:, [type]}})"},
        { "trigger": "LSDateFormat\tfn. (cfscript)", "contents": "LSDateFormat(${1:${2:date}${3:, [mask]}})"},
        { "trigger": "LSEuroCurrencyFormat\tfn. (cfscript)", "contents": "LSEuroCurrencyFormat(${1:\"${2:currency}\", \"${3:type}\"})"},
        { "trigger": "LSIsCurrency\tfn. (cfscript)", "contents": "LSIsCurrency(${1:\"${2:string}\"})"},
        { "trigger": "LSIsDate\tfn. (cfscript)", "contents": "LSIsDate(${1:\"${2:string}\"})"},
        { "trigger": "LSIsNumeric\tfn. (cfscript)", "contents": "LSIsNumeric(${1:\"${2:string}\"})"},
        { "trigger": "LSNumberFormat\tfn. (cfscript)", "contents": "LSNumberFormat(${1:${2:number}${3:, [mask]}})"},
        { "trigger": "LSParseCurrency\tfn. (cfscript)", "contents": "LSParseCurrency(${1:\"${2:string}\"})"},
        { "trigger": "LSParseDateTime\tfn. (cfscript)", "contents": "LSParseDateTime(${1:\"${2:dt_string}\"})"},
        { "trigger": "LSParseEuroCurrency\tfn. (cfscript)", "contents": "LSParseEuroCurrency(${1:\"${2:currency_string}\"})"},
        { "trigger": "LSParseNumber\tfn. (cfscript)", "contents": "LSParseNumber(${1:\"${2:string}\"})"},
        { "trigger": "LSTimeFormat\tfn. (cfscript)", "contents": "LSTimeFormat(${1:${2:time}${3:, [mask]}})"},
        { "trigger": "lTrim\tfn. (cfscript)", "contents": "lTrim(${1:\"${2:string}\"})"},
        { "trigger": "max\tfn. (cfscript)", "contents": "max(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "mid\tfn. (cfscript)", "contents": "mid(${1:\"${2:string}\", ${3:start}, ${4:count}})"},
        { "trigger": "min\tfn. (cfscript)", "contents": "min(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "minute\tfn. (cfscript)", "contents": "minute(${1:${2:date}})"},
        { "trigger": "month\tfn. (cfscript)", "contents": "month(${1:${2:date}})"},
        { "trigger": "monthAsString\tfn. (cfscript)", "contents": "monthAsString(${1:${2:month_number}})"},
        { "trigger": "now\tfn. (cfscript)", "contents": "now(${1:})"},
        { "trigger": "numberFormat\tfn. (cfscript)", "contents": "numberFormat(${1:${2:number}${3:, [mask]}})"},
        { "trigger": "paragraphFormat\tfn. (cfscript)", "contents": "paragraphFormat(${1:\"${2:string}\"})"},
        { "trigger": "parseDateTime\tfn. (cfscript)", "contents": "parseDateTime(${1:\"${2:dt_string}\"${3:, [pop_conversion]}})"},
        { "trigger": "pi\tfn. (cfscript)", "contents": "pi(${1:})"},
        { "trigger": "preserveSingleQuotes\tfn. (cfscript)", "contents": "preserveSingleQuotes(${1:\"${2:variable}\"})"},
        { "trigger": "quarter\tfn. (cfscript)", "contents": "quarter(${1:${2:date}})"},
        { "trigger": "queryAddColumn\tfn. (cfscript)", "contents": "queryAddColumn(${1:${2:query}, \"${3:column-name}\"${4:, [datatype]}, ${5:array-name}})"},
        { "trigger": "queryAddRow\tfn. (cfscript)", "contents": "queryAddRow(${1:${2:query}${3:, [number]}})"},
        { "trigger": "queryNew\tfn. (cfscript)", "contents": "queryNew(${1:\"${2:columnlist}\"${3:, [columntypelist]}})"},
        { "trigger": "querySetCell\tfn. (cfscript)", "contents": "querySetCell(${1:${2:query}, \"${3:column_name}\", ${4:value}${5:, [row_number]}})"},
        { "trigger": "quotedValueList\tfn. (cfscript)", "contents": "quotedValueList(${1:${2:column}${3:, [delimiter]}})"},
        { "trigger": "rand\tfn. (cfscript)", "contents": "rand(${1:${2:[algorithm]}})"},
        { "trigger": "randomize\tfn. (cfscript)", "contents": "randomize(${1:${2:number}${3:, [algorithm]}})"},
        { "trigger": "randRange\tfn. (cfscript)", "contents": "randRange(${1:${2:number1}, ${3:number2}${4:, [algorithm]}})"},
        { "trigger": "reFind\tfn. (cfscript)", "contents": "reFind(${1:${2:reg_expression}, \"${3:string}\"${4:, [start]}${5:, [returnsubexpressions]}})"},
        { "trigger": "reFindNoCase\tfn. (cfscript)", "contents": "reFindNoCase(${1:${2:reg_expression}, \"${3:string}\"${4:, [start]}${5:, [returnsubexpressions]}})"},
        { "trigger": "releaseComObject\tfn. (cfscript)", "contents": "releaseComObject(${1:${2:objectName}})"},
        { "trigger": "removeChars\tfn. (cfscript)", "contents": "removeChars(${1:\"${2:string}\", ${3:start}, ${4:count}})"},
        { "trigger": "repeatString\tfn. (cfscript)", "contents": "repeatString(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "replace\tfn. (cfscript)", "contents": "replace(${1:\"${2:string}\", \"${3:substring1}\", \"${4:substring2}\"${5:, [scope]}})"},
        { "trigger": "replaceList\tfn. (cfscript)", "contents": "replaceList(${1:\"${2:string}\", \"${3:list1}\", \"${4:list2}\"})"},
        { "trigger": "replaceNoCase\tfn. (cfscript)", "contents": "replaceNoCase(${1:\"${2:string}\", \"${3:substring1}\", \"${4:substring2}\"${5:, [scope]}})"},
        { "trigger": "reReplace\tfn. (cfscript)", "contents": "reReplace(${1:\"${2:string}\", ${3:reg_expression}, \"${4:substring}\"${5:, [scope]}})"},
        { "trigger": "reReplaceNoCase\tfn. (cfscript)", "contents": "reReplaceNoCase(${1:\"${2:string}\", ${3:reg_expression}, \"${4:substring}\"${5:, [scope]}})"},
        { "trigger": "reverse\tfn. (cfscript)", "contents": "reverse(${1:\"${2:string}\"})"},
        { "trigger": "right\tfn. (cfscript)", "contents": "right(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "rJustify\tfn. (cfscript)", "contents": "rJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "round\tfn. (cfscript)", "contents": "round(${1:${2:number}})"},
        { "trigger": "rTrim\tfn. (cfscript)", "contents": "rTrim(${1:\"${2:string}\"})"},
        { "trigger": "second\tfn. (cfscript)", "contents": "second(${1:${2:date}})"},
        { "trigger": "sendGatewayMessage\tfn. (cfscript)", "contents": "sendGatewayMessage(${1:\"${2:gatewayID}\", ${3:data}})"},
        { "trigger": "serialize\tfn. (cfscript)", "contents": "serialize(${1:variable_name})"},
        { "trigger": "serializeJSON\tfn. (cfscript)", "contents": "serializeJSON(${1:variable_name})"},
        { "trigger": "setEncoding\tfn. (cfscript)", "contents": "setEncoding(${1:\"${2:scope_name}\", \"${3:charset}\"})"},
        { "trigger": "setLocale\tfn. (cfscript)", "contents": "setLocale(${1:\"${2:new_locale}\"})"},
        { "trigger": "setProfileString\tfn. (cfscript)", "contents": "setProfileString(${1:\"${2:inipath}\", \"${3:section}\", \"${4:entry}\", \"${5:value}\"})"},
        { "trigger": "setVariable\tfn. (cfscript)", "contents": "setVariable(${1:\"${2:name}\", \"${3:value}\"})"},
        { "trigger": "sgn\tfn. (cfscript)", "contents": "sgn(${1:${2:number}})"},
        { "trigger": "sin\tfn. (cfscript)", "contents": "sin(${1:${2:number}})"},
        { "trigger": "spanExcluding\tfn. (cfscript)", "contents": "spanExcluding(${1:\"${2:string}\", \"${3:set}\"})"},
        { "trigger": "spanIncluding\tfn. (cfscript)", "contents": "spanIncluding(${1:\"${2:string}\", \"${3:set}\"})"},
        { "trigger": "sqr\tfn. (cfscript)", "contents": "sqr(${1:${2:number}})"},
        { "trigger": "stripCR\tfn. (cfscript)", "contents": "stripCR(${1:\"${2:string}\"})"},
        { "trigger": "structAppend\tfn. (cfscript)", "contents": "structAppend(${1:${2:struct1}, ${3:struct2}${4:, [overwriteFlag]}})"},
        { "trigger": "structClear\tfn. (cfscript)", "contents": "structClear(${1:${2:structure}})"},
        { "trigger": "structCopy\tfn. (cfscript)", "contents": "structCopy(${1:${2:structure}})"},
        { "trigger": "structCount\tfn. (cfscript)", "contents": "structCount(${1:${2:structure}})"},
        { "trigger": "structDelete\tfn. (cfscript)", "contents": "structDelete(${1:\"${2:structure}\", \"${3:key}\"${4:, [indicatenotexisting]}})"},
        { "trigger": "structFind\tfn. (cfscript)", "contents": "structFind(${1:${2:structure}, \"${3:key}\"})"},
        { "trigger": "structFindKey\tfn. (cfscript)", "contents": "structFindKey(${1:${2:top}, \"${3:value}\", \"${4:scope}\"})"},
        { "trigger": "structFindValue\tfn. (cfscript)", "contents": "structFindValue(${1:${2:top}, \"${3:value}\"${4:, [scop]}})"},
        { "trigger": "structGet\tfn. (cfscript)", "contents": "structGet(${1:\"${2:pathdesired}\"})"},
        { "trigger": "structInsert\tfn. (cfscript)", "contents": "structInsert(${1:${2:structure}, \"${3:key}\", ${4:value}${5:, [allowoverwrite]}})"},
        { "trigger": "structIsEmpty\tfn. (cfscript)", "contents": "structIsEmpty(${1:${2:structure}})"},
        { "trigger": "structKeyArray\tfn. (cfscript)", "contents": "structKeyArray(${1:${2:structure}})"},
        { "trigger": "structKeyExists\tfn. (cfscript)", "contents": "structKeyExists(${1:${2:structure}, \"${3:key}\"})"},
        { "trigger": "structKeyList\tfn. (cfscript)", "contents": "structKeyList(${1:${2:structure}${3:, [delimiter]}})"},
        { "trigger": "structNew\tfn. (cfscript)", "contents": "structNew(${1:})"},
        { "trigger": "structSort\tfn. (cfscript)", "contents": "structSort(${1:${2:base}, \"${3:sorttype}\", \"${4:sortorder}\", \"${5:pathtosubelement}\"})"},
        { "trigger": "structUpdate\tfn. (cfscript)", "contents": "structUpdate(${1:${2:structure}, \"${3:key}\", ${4:value}})"},
        { "trigger": "tan\tfn. (cfscript)", "contents": "tan(${1:${2:number}})"},
        { "trigger": "timeFormat\tfn. (cfscript)", "contents": "timeFormat(${1:${2:time}${3:, [mask]}})"},
        { "trigger": "toBase64\tfn. (cfscript)", "contents": "toBase64(${1:${2:string_or_object}${3:, [encoding]}})"},
        { "trigger": "toBinary\tfn. (cfscript)", "contents": "toBinary(${1:${2:base64_or_object}})"},
        { "trigger": "toScript\tfn. (cfscript)", "contents": "toScript(${1:${2:cfvar}, \"${3:javascriptvar}\"${4:, [outputformat]}${5:, [ASFormat]}})"},
        { "trigger": "toString\tfn. (cfscript)", "contents": "toString(${1:${2:any_value}${3:, [encoding]}})"},
        { "trigger": "trim\tfn. (cfscript)", "contents": "trim(${1:\"${2:string}\"})"},
        { "trigger": "uCase\tfn. (cfscript)", "contents": "uCase(${1:\"${2:string}\"})"},
        { "trigger": "urlDecode\tfn. (cfscript)", "contents": "urlDecode(${1:\"${2:urlencodedstring}\"${3:, [charset]}})"},
        { "trigger": "urlEncodedFormat\tfn. (cfscript)", "contents": "urlEncodedFormat(${1:\"${2:string}\"${3:, [charset]}})"},
        { "trigger": "urlSessionFormat\tfn. (cfscript)", "contents": "urlSessionFormat(${1:${2:requesturl}})"},
        { "trigger": "val\tfn. (cfscript)", "contents": "val(${1:\"${2:string}\"})"},
        { "trigger": "valueList\tfn. (cfscript)", "contents": "valueList(${1:${2:column}${3:, [delimiter]}})"},
        { "trigger": "week\tfn. (cfscript)", "contents": "week(${1:${2:date}})"},
        { "trigger": "wrap\tfn. (cfscript)", "contents": "wrap(${1:\"${2:string}\", ${3:limit}${4:, [strip]}})"},
        { "trigger": "writeDump\tfn. (cfscript)", "contents": "writeDump(${1:var})"},
        { "trigger": "writeOutput\tfn. (cfscript)", "contents": "writeOutput(${1:\"${2:string}\"})"},
        { "trigger": "xmlChildPos\tfn. (cfscript)", "contents": "xmlChildPos(${1:${2:elem}, \"${3:childname}\", ${4:n}})"},
        { "trigger": "xmlElemNew\tfn. (cfscript)", "contents": "xmlElemNew(${1:${2:xmlobj}${3:, [namespace]}, \"${4:childname}\"})"},
        { "trigger": "xmlFormat\tfn. (cfscript)", "contents": "xmlFormat(${1:\"${2:string}\"})"},
        { "trigger": "xmlGetNodeType\tfn. (cfscript)", "contents": "xmlGetNodeType(${1:${2:xmlNode}})"},
        { "trigger": "xmlNew\tfn. (cfscript)", "contents": "xmlNew(${1:${2:[casesensitive]}})"},
        { "trigger": "xmlParse\tfn. (cfscript)", "contents": "xmlParse(${1:\"${2:xmlstring}\"${3:, [casesensitive]}${4:, [validator]}})"},
        { "trigger": "xmlSearch\tfn. (cfscript)", "contents": "xmlSearch(${1:${2:xmldoc}, \"${3:xpathstring}\"})"},
        { "trigger": "xmlTransform\tfn. (cfscript)", "contents": "xmlTransform(${1:\"${2:xml}\", \"${3:xsl}\"${4:, [parameters]}})"},
        { "trigger": "xmlValidate\tfn. (cfscript)", "contents": "xmlValidate(${1:${2:xmlDoc}${3:, [validator]}})"},
        { "trigger": "year\tfn. (cfscript)", "contents": "year(${1:${2:date}})"},
        { "trigger": "yesNoFormat\tfn. (cfscript)", "contents": "yesNoFormat(${1:${2:value}})"},
        //Other constructs
        { "trigger": "for-in-loop\tfn. (cfscript)", "contents": "for(${1:item} in ${2:collection}) {\n   ${3:code};\n}"}

    ]
}
